import{u as m,c as l}from"./users-BWKttZpu.js";import{a9 as h,r as f}from"./index-tQSIi359.js";async function C(t,e){var o;let n;if(typeof e.connector=="function"?n=t._internal.connectors.setup(e.connector):n=e.connector,n.uid===t.state.current)throw new h;try{t.setState(i=>({...i,status:"connecting"})),n.emitter.emit("message",{type:"connecting"});const{connector:r,...s}=e,c=await n.connect(s),u=c.accounts;return n.emitter.off("connect",t._internal.events.connect),n.emitter.on("change",t._internal.events.change),n.emitter.on("disconnect",t._internal.events.disconnect),await((o=t.storage)==null?void 0:o.setItem("recentConnectorId",n.id)),t.setState(i=>({...i,connections:new Map(i.connections).set(n.uid,{accounts:u,chainId:c.chainId,connector:n}),current:n.uid,status:"connected"})),{accounts:u,chainId:c.chainId}}catch(r){throw t.setState(s=>({...s,status:s.current?"connected":"disconnected"})),r}}let a=[];function d(t){const e=t.connectors;return a.map(n=>n.uid)===e.map(n=>n.uid)?a:(a=e,e)}function p(t,e){const{onChange:n}=e;return t._internal.connectors.subscribe((o,r)=>{n(Object.values(o),r)})}function y(t){return{mutationFn(e){return C(t,e)},mutationKey:["connect"]}}function w(t={}){const e=m(t);return f.useSyncExternalStore(n=>p(e,{onChange:n}),()=>d(e),()=>d(e))}function b(t={}){const{mutation:e}=t,n=m(t),o=y(n),{mutate:r,mutateAsync:s,...c}=l({...e,...o});return f.useEffect(()=>n.subscribe(({status:u})=>u,(u,i)=>{i==="connected"&&u==="disconnected"&&c.reset()}),[n,c.reset]),{...c,connect:r,connectAsync:s,connectors:w({config:n})}}export{b as u};
