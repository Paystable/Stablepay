name: Deploy to Google Cloud Run

# Required Secrets (must be set in repository settings):
# - GCP_SA_KEY: Google Cloud Service Account key (JSON)
# - GCP_PROJECT_ID: Google Cloud Project ID
# - FIREBASE_SERVICE_ACCOUNT_KEY: Firebase Service Account key (Base64 encoded JSON)
# - FIREBASE_PROJECT_ID: Firebase Project ID

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  SERVICE_NAME: stablepay-apy
  REGION: us-central1

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type check
      run: npm run check
    
    - name: Build application
      run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate required secrets
      env:
        GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      run: |
        if [ -z "$GCP_SA_KEY" ]; then
          echo "Error: GCP_SA_KEY secret is not set"
          exit 1
        fi
        if [ -z "$GCP_PROJECT_ID" ]; then
          echo "Error: GCP_PROJECT_ID secret is not set"
          exit 1
        fi
        if [ -z "$FIREBASE_SERVICE_ACCOUNT_KEY" ]; then
          echo "Error: FIREBASE_SERVICE_ACCOUNT_KEY secret is not set"
          exit 1
        fi
        if [ -z "$FIREBASE_PROJECT_ID" ]; then
          echo "Error: FIREBASE_PROJECT_ID secret is not set"
          exit 1
        fi
        echo "All required secrets are present"
    
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
    
    - name: Build and push Docker image
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      run: |
        docker build -t gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .
        docker push gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA
        docker tag gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:latest
        docker push gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:latest
    
    - name: Deploy to Cloud Run
      env:
        GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
        FIREBASE_SERVICE_ACCOUNT_KEY: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}
        FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image gcr.io/$GCP_PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port 8080 \
          --memory 1Gi \
          --cpu 1 \
          --max-instances 10 \
          --min-instances 0 \
          --concurrency 100 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production \
          --set-env-vars PORT=8080 \
          --set-env-vars HOST=0.0.0.0 \
          --set-env-vars FIREBASE_SERVICE_ACCOUNT_KEY="$FIREBASE_SERVICE_ACCOUNT_KEY" \
          --set-env-vars FIREBASE_PROJECT_ID="$FIREBASE_PROJECT_ID" \
          --set-env-vars CORS_ORIGIN="*"
    
    - name: Get service URL
      id: get-url
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --platform managed --region $REGION --format 'value(status.url)')
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Service deployed at: $SERVICE_URL"
    
    - name: Health check
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        curl -f "${{ steps.get-url.outputs.SERVICE_URL }}/health" || exit 1
        echo "Health check passed!"
    
    - name: Comment deployment URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Deployment successful!**
            
            **Service URL**: ${{ steps.get-url.outputs.SERVICE_URL }}
            **Health Check**: ${{ steps.get-url.outputs.SERVICE_URL }}/health
            **Admin Panel**: ${{ steps.get-url.outputs.SERVICE_URL }}/admin/early-access
            
            The application has been deployed to Google Cloud Run and is ready for testing.`
          })
